substitutions:
  device_version: "1.0.0"

# Node definition (Blitzwolf)
esphome:
  name: ${device_name_id}
  platform: ESP8266
  board: esp8285

# Enable Packages
packages:
  default_sensors: !include /home/esphome/config/common/packages/default_sensors.yaml
  default_wifi: !include /home/esphome/config/common/packages/default_wifi.yaml
  default_mqtt: !include /home/esphome/config/common/packages/default_mqtt.yaml
  default_api: !include /home/esphome/config/common/packages/default_api.yaml

# Needed for Total Daily Energy sensor below
time:
  - platform: sntp
    id: sntp_time
    servers: !secret sntp_server
    on_time:
      - seconds: /30
        then:
          - mqtt.publish:
              topic: ${mqtt_base_topic}/switch/relay/state
              payload: !lambda |-
                return id(relay).state ? "ON" : "OFF";

sensor:
  # Reports the Current, Voltage, and Power used by the plugged-in device
  - platform: hlw8012
    sel_pin:
      number: GPIO12
      inverted: true
    cf_pin: GPIO04
    cf1_pin: GPIO05
    change_mode_every: 8
    update_interval: 10s
    current:
      name: ${device_name} Amperage
      icon: mdi:current-ac
      unit_of_measurement: A
    voltage:
      name: ${device_name} Voltage
      icon: mdi:flash-circle
      unit_of_measurement: V
    power:
      id: wattage
      name: ${device_name} Wattage
      icon: mdi:flash-outline
      unit_of_measurement: W
    current_resistor: ${current_res}
    voltage_divider: ${voltage_div}

  # Reports the total Power so-far each day, resets at midnight, see https://esphome.io/components/sensor/total_daily_energy.html
  - platform: total_daily_energy
    name: ${device_name} Total Daily Energy
    icon: mdi:circle-slice-3
    power_id: wattage
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh

binary_sensor:
  # Button on the front is pressed and then toggle relay
  - platform: gpio
    device_class: power
    pin:
      number: GPIO03
      mode: INPUT_PULLUP
      inverted: True
    name: ${device_name} Button # Name to make button visible in HA
    on_press:
      - switch.toggle: relay

switch:
  # Relay itself
  - platform: gpio
    name: ${device_name}
    pin: GPIO14
    id: relay
    restore_mode: ${default_state} #Try to restore relay state after reboot/power-loss event.
    #RESTORE_DEFAULT_OFF (Default) - Attempt to restore state and default to OFF if not possible to restore. Uses flash write cycles.
    #RESTORE_DEFAULT_ON - Attempt to restore state and default to ON. Uses flash write cycles.
    #ALWAYS_OFF - Always initialize the pin as OFF on bootup. Does not use flash write cycles.
    #ALWAYS_ON - Always initialize the pin as ON on bootup. Does not use flash write cycles.
    on_turn_on: # Action when relay is turned on
      - script.execute: led_power_on
    on_turn_off: # Action when relay is turned off
      - script.execute: led_relay_off

output:
  # Output GPIOs for blue led
  - platform: esp8266_pwm # Blue
    id: blue_output
    pin:
      number: GPIO01
      inverted: True

status_led:
  pin:
    number: GPIO13
    inverted: True

light:
  # RGB light
  - platform: monochromatic
    name: ${device_name} Light
    output: blue_output
    id: blue_led

# Blink the blue light if we aren't connected to WiFi. Could use https://esphome.io/components/status_led.html instead but then we couldn't use the blue light for other things as well.
# Only if not connected after 30s
interval:
  - interval: 2000ms
    then:
      - if:
          condition:
            for:
              time: 30s
              condition:
                not:
                  wifi.connected:
          then:
            - light.turn_on:
                id: blue_led
                brightness: 100%

script:
  - id: led_relay_off # Normal operation when relay is off
    then:
      - light.turn_off:
          id: blue_led
  - id: led_power_on # Normal operation when relay is on
    then:
      - light.turn_on:
          id: blue_led
          brightness: 80%
